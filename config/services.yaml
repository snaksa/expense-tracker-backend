imports:
    - { resource: graphql.yaml }

parameters:
    cognito.client.id: '%env(COGNITO_CLIENT_ID)%'
    cognito.client.secret: '%env(COGNITO_CLIENT_SECRET)%'
    cognito.user.pool: '%env(COGNITO_POOL)%'
    cognito.config:
        version: '%env(COGNITO_VERSION)%'
        region: '%env(COGNITO_REGION)%'
        credentials:
            key: '%env(COGNITO_AWS_KEY)%'
            secret: '%env(COGNITO_AWS_SECRET)%'

services:
    # default configuration for services in *this* file
    _defaults:
        public: true
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,GraphQL}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    Aws\CognitoIdentityProvider\CognitoIdentityProviderClient:
        arguments:
            $args: '%cognito.config%'

    expenses.cognito.provider:
        alias: Aws\CognitoIdentityProvider\CognitoIdentityProviderClient

    App\Services\UserService:
        arguments:
            $clientId: '%cognito.client.id%'
            $secretKey: '%cognito.client.secret%'
            $poolId: '%cognito.user.pool%'
            $cognitoClient: '@expenses.cognito.provider'
